{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Venera is a tool for automating customized tests and attacks agaist many kinds of protocol. It relies on a scripting engine based on the Lua scripting language that makes it possible to create modules for all types of checks and exploits. The framework is a manager and interpreter of Lua scripts that provides functions and libraries for the creation of powerful tools integrated with services used during unitary tests, vulnerability scanning and exploitation fase. The user can create its own modules or use community made scripts, the tool is switchable for all kinds of need situation.</p> <p>The framework is written in Golang looking for compatibility. The simplicity and malleability of the tool is one of the main objectives. Be something powerful and capable, while not being time-consuming to compile and resolve libraries.</p> <pre><code>        __    _ ____________________________________\n        \\ \\  | |   ___   _  _    ___   _  _   __ _  |\n         \\ \\ | |  / _ \\ | \\| |  / _ \\ | |//  / _' | |\n          \\ \\| | |  __/ |  \\ | |  __/ | |/  | (_| | |\n           \\___|  \\___| |_| _|  \\___| |_|    \\__,_| |\n           -----------------------------------------+\n           Recon Mission: github.com/farinap5/venera\n</code></pre>"},{"location":"Contribution/","title":"Contribution","text":"<p>First and foremost, Venera is a tool driven by my necessities and learning goals, so many features may not make that sense for you as a user.</p> <p>Feel free to bring new perspectives and ideas. Any type of contribution is always welcome.</p> <p>The main channel for bringing contributions is by creating issues. It is the first way we use to organize the demands. </p> <p>If you are looking for a way to contribute with the project, start by reading the issues, there may have something you can do for the project, like help write or translate documentation, improve code, interface as user usability and so on.</p> <p>We have the python script <code>todo.py</code>. It lists all <code>TODO</code> comments written during the code. It is just another way to map improvements for the future of that function.</p>"},{"location":"First%20Steps/","title":"First Steps","text":"<p>Now that you have Venera installed, after before steps it must be ready to go. To run it, open a new command line and run the binary with the <code>venera</code> command, this should load a new interactive prompt, the tool's interface where the user should take their actions.</p> <p>After <code>venera</code> starts up, it must present a banner containing version information and the repository in addition to its name.</p>"},{"location":"Global%20Variables/","title":"Global Variables","text":"<p>The global variable acts like a simple key-value database. It must be used for storing data that can be accessed globally by the core tool and the scripts executed.</p> <p>Global variables are persistent, and will remain set between sessions.</p>"},{"location":"Global%20Variables/#how-it-works","title":"How it Works","text":"<p>The way to configure a global variable is exactly the same as how to configure a script variable. The user uses the <code>set</code> command followed by the key and the values to assign for that specific key.</p> <p>What changes is that it is now necessary to use the <code>global</code> keyword after the <code>set</code> command.</p> <pre><code>[*]&gt;&gt; set global &lt;key&gt; &lt;value&gt;\n</code></pre> <p>The way of viewing the global variables is simple, just type <code>globals</code> and the output will contain all the variables already set so far.</p> <pre><code>[*]&gt;&gt; globals\n\nVARIABLE   VALUE\n--------   -----\nkey        value\nchain      on\nVERBOSE    true\nuser       username\ntest       test\nmyscripts  myscripts/\nlogfile    ~/.venera/message.log\n</code></pre>"},{"location":"Global%20Variables/#use-cases","title":"Use Cases","text":"<p>Global variables, just like environment variables of an operating system, will contain some options that the core tool will take into account when taking some actions.</p> <p>For instance, it is possible to configure the location where <code>venera</code> stores the execution log, it is taken from the global variable <code>logfile</code> so altering the value will change the place to keep the debugging data. You could prefer keep this type of data under /var/log or other place, globals is where to change this.</p>"},{"location":"Global%20Variables/#automate-script-configuration","title":"Automate Script Configuration","text":"<p>Let's assume we want to perform a security test with the script <code>scripts/web/ngx1.lua</code>.</p> <p>The only variable the script requires to be set is the <code>URL</code> variable. It keeps the url of the remote host.</p> <pre><code>(scripts/web/ngx1.lua)&gt;&gt; options\n\nVARIABLE  DEFAULT             REQUIRED  DESCRIPTION\n--------  -------             --------  -----------\nURL       http://example.com  yes       URL\n</code></pre> <p>The <code>URL</code> variable, using globals, can be configured globally, so it is possible to persist this data for future use.</p> <p>So if this variable is common, it is possible to set it outside the script and whenever you enter a script that requires the <code>URL</code> variable it will be set automatically from globals.</p> <p>Configure the variable <code>URL</code>.</p> <pre><code>[*]&gt;&gt; set global URL http://mydomain.com\n</code></pre> <p>And load the script.</p> <pre><code>[*]&gt;&gt; use scripts/web/ngx1.lua\n[OK] URL &lt;- http://mydomain.com\n(scripts/web/ngx1.lua)&gt;&gt; options\n\nVARIABLE  DEFAULT              REQUIRED  DESCRIPTION\n--------  -------              --------  -----------\nURL       http://mydomain.com  yes       URL\n</code></pre> <p>Notice that the variable was set automatically.</p>"},{"location":"Instalation/","title":"Instalation","text":"<p>This page is to be built.</p>"},{"location":"Script%20Management%20Commands/","title":"Script Management Commands","text":"<p>This page is to be built.</p>"},{"location":"Search/","title":"Search","text":"<p>The <code>search</code> command allows searching and listing scripts by assigning different filtering parameters.</p> <p>The use is very straight forward as it takes proprieties from name, path and metadata to bring results. </p> <p>Just by typing <code>search</code> it will show all listable scripts containing in the database.</p> <pre><code>[*]&gt;&gt; search\n\nCOUNT  PATH                                     DESCRIPTION                   TAGS\n-----  ----                                     -----------                   ----\n1      scripts/cms/wp_user_enum.lua             Wordpress user enumeratio...  enum,http,wordpress,scann\n2      scripts/cve/cve-2014/CVE-2014-6271.lua   Shellshock Remote Code Ex...  cve,rce,http,bash,scanner\n3      scripts/cve/cve-2021/CVE-2021-40978.lua  LFI affecting MKDocs 1.2....  cve,lfi,http,mkdocs,scann\n4      scripts/myscripts/meynewsc.lua           IE test                       example,XSS,scanner\n5      scripts/test/base64.lua                  Lorem ipsum dolor sit ame...  example,encoding,util\n...\n</code></pre> <p>It is possible to apply filters like <code>match</code> keyword that will filter using a matching pattern.</p> <pre><code>[*]&gt;&gt; search match &lt;substring&gt;\n</code></pre> <p>It is possible to specify whether the searched pattern can be found in places such as the path or description of the script.</p> <pre><code>search match:path &lt;substring&gt;\nsearch match:description &lt;substring&gt;\n</code></pre> <p>The main way to search for specific scripts is by tag search. It can be done with the <code>tag</code> parameter.</p> <pre><code>search tag &lt;tag1 tag2...&gt;\n</code></pre> <p>The following example illustrates the usability.</p> <pre><code>[*]&gt;&gt; serach tag nginx apache \n</code></pre>"},{"location":"Script%20Engine/Built-in%20Functions/","title":"Built-in Functions","text":"<p>This page is to be built.</p>"},{"location":"Script%20Engine/Introduction/","title":"Introduction","text":"<p>To achieve the goal of having a simple and very effective scripting system <code>venera</code> has the ability to run scripts written in Lua as it has a coupled interpreter. The user is able to utilize all the power provided by a scripting language like Lua.</p> <p>As this is a widely used language in embedded systems, game systems and so on, it has the advantage of being powerful, very light and fast but extremely simple to write algorithms with it.</p> <p>To write code for <code>venera</code> it is necessary to have a Lua language base, so contact the documentation at the following link: www.lua.org/docs.html</p>"},{"location":"Script%20Engine/Metadata/","title":"Metadata","text":"<p>This page is to be built.</p>"},{"location":"Script%20Engine/Variables/","title":"Variables","text":"<p>This page is to be built.</p>"},{"location":"Script%20Engine/Examples/First%20Script/","title":"First Script","text":"<p>Putting together everything seen before, write a script capable of printing what is defined by the user through the command line, so when the user initializes the <code>main()</code> function of the script through the command line using the <code>run</code> command, this string should appear on the screen.</p> <p>Create a script <code>/tmp/test.lua</code> and write the following content:</p> <pre><code>METADATA = {\nAUTHOR = {\"Author1 &lt;author1@mail.com&gt;\",\n\"Author2 &lt;author2@mail.com&gt;\",\n\"Author3 &lt;author3@mail.com&gt;\"\n},\nVERSION = \"0.1\",\nTAGS = {\"example\",\"test\"},\nINFO = [[Lorem ipsum dolor sit amet, consectetur adipiscing elit,\nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris\nnisi ut aliquip ex ea commodo consequat.]]\n}\nVARS = {\nDATA = {VALUE=\"my data\", NEEDED=\"yes\", DESCRIPT=\"Any\"},\n}\nfunction Init()\nMeta(METADATA)\nLoadVars(VARS)\nend\nfunction Main()\nPrintSuccs(VARS.DATA.VALUE)\nend\n</code></pre> <p>It is necessary to import the script into a directory where <code>venera</code> has access. Use the <code>import</code> command as shown below:</p> <pre><code>[*]&gt;&gt; import /tmp/test.lua test.lua\n</code></pre> <p>The script was written in location <code>scripts/myscripts/test.lua</code>. Load the imported script with <code>use</code> command:</p> <pre><code>[*]&gt;&gt; use scripts/myscripts/test.lua\n(scripts/myscripts/test.lua)&gt;&gt; \n</code></pre> <p>The moment the script has been loaded, the <code>Init()</code> function is executed, loading the essential tables (METADATA and VARS) and any code that exists there.</p> <p>Type <code>info</code> to show information about the script:</p> <pre><code>(scripts/myscripts/test.lua)&gt;&gt; info\n## AUTHOR/S ##\n1) Author1 &lt;author1@mail.com&gt;\n2) Author2 &lt;author2@mail.com&gt;\n3) Author3 &lt;author3@mail.com&gt;\n\n## TAGS ##\n1) example\n2) test\n\n## INFO ##\nLorem ipsum dolor sit amet, consectetur adipiscing elit,\nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris\nnisi ut aliquip ex ea commodo consequat.\n</code></pre> <p>Type <code>options</code> to see what the user can configure: </p> <pre><code>(scripts/myscripts/test.lua)&gt;&gt; options\n\nVARIABLE  DEFAULT  REQUIRED  DESCRIPTION\n--------  -------  --------  -----------\nDATA      my data  yes       Any\n</code></pre> <p>Set any value to the <code>DATA</code> variable with the command <code>set</code>:</p> <pre><code>(scripts/myscripts/test.lua)&gt;&gt; set DATA Hello World\\n\n[OK] DATA &lt;- Hello World\\n\n</code></pre> <p>And finally execute the script:</p> <pre><code>(scripts/myscripts/test.lua)&gt;&gt; run\n[OK]- Hello World\n</code></pre>"}]}